# -*- coding: utf-8 -*-
"""Punariyal_LLMipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDCQ96OPcRAMz4bGb0bNwqVIlTwtZx08
"""

pip install pandas nltk matplotlib

pip install Open-Tamil

#-*- coding: utf-8 -*-
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import matplotlib.pyplot as plt

# CSV கோப்பைப் படித்தல்
data = pd.read_csv("Tolkappiyam_Punariyal.csv")

# தரவின் ஒரு பார்வை
print(data.head())

# prompt: மேலே உள்ள நிரலின் தொடர்ச்சியாக அமையவேண்டிய நிரலினை எழுதவும்

import re

# nltk இலிருந்து தேவையானவற்றை இறக்குமதி செய்தல்
nltk.download('punkt')
nltk.download('stopwords')

# தமிழ் நிறுத்தற்குறிகளை அகற்றுவதற்கான செயல்பாடு
def remove_tamil_punctuation(text):
    tamil_punctuations = ".,;:!?"
    text = ''.join(ch for ch in text if ch not in tamil_punctuations)
    return text

# தமிழ் வார்த்தைகளின் பட்டியலை உருவாக்குவதற்கான செயல்பாடு
def get_tamil_words(text):
  # முதலில், தமிழ் எழுத்துக்களைக் கொண்ட சொற்களைத் தேர்ந்தெடுக்கவும்
  tamil_words = re.findall(r'[a-zA-Z\u0B80-\u0BFF]+', text)

  # பின்னர், ஒவ்வொரு வார்த்தையையும் தனித்தனியாகச் சேர்க்கவும்
  return tamil_words

print(data.columns)

data = pd.read_csv("Tolkappiyam_Punariyal.csv", encoding='utf-8')

data = pd.read_csv("Tolkappiyam_Punariyal.csv", encoding='utf-8')
print(data.columns) # print column names
display(data) # display the entire DataFrame for detailed inspection

cleaned_tamil_text = remove_tamil_punctuation(tamil_text)
print("Cleaned Text:", cleaned_tamil_text)

words = get_tamil_words(cleaned_tamil_text)
print("Tamil Words:", words)

# prompt: இதன் அடுத்தக்கட்ட நிரலினை எழுதவும்

import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import re

# ... (previous code)

# Assuming 'tamil_text' is defined somewhere in your previous code,
#  or you'll need to replace it with the actual text you want to process.
# Example:
tamil_text = data['Response'].iloc[0]  # Get the text from the first row of the 'Text' column


cleaned_tamil_text = remove_tamil_punctuation(tamil_text)
print("Cleaned Text:", cleaned_tamil_text)

words = get_tamil_words(cleaned_tamil_text)
print("Tamil Words:", words)

# Word Frequency Analysis
word_freq = nltk.FreqDist(words)

# Display the most common words
print("Most Common Words:")
print(word_freq.most_common(10)) # Show top 10 most frequent words

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import tamil

# NotoSansTamil-Bold.ttf எழுத்துருவை ஏற்றுதல்
font_path = '/content/TAU-Marutham.ttf'
prop = fm.FontProperties(fname=font_path)

# வார்த்தை அதிர்வெண் வரைபடம்
word_freq.plot(20, cumulative=False)
# x-axis லேபிள்களுக்கு எழுத்துருவைப் பயன்படுத்துதல்
plt.xticks(fontproperties=prop)

plt.show()

plt.figure(figsize=(12, 6))
word_freq.plot(20, cumulative=False)

try:
  prop = fm.FontProperties(fname=font_path)
  plt.xticks(fontproperties=prop, rotation=45, ha='right')
except Exception as e:
  print(f"Error setting font properties: {e}")
  plt.xticks(rotation=45, ha='right')

  plt.title('Word Frequency Distribution', fontproperties=prop)
  plt.xlabel('Words', fontproperties=prop)
  plt.ylabel('Frequency', fontproperties=prop)
  plt.tight_layout()
  plt.show()

# prompt: மேலே உள்ள காட்சிப் படுத்தலில்  x-axis லேபிள்களுக்கு எழுத்துருவைப் பயன்படுத்துதல் இன்னும் தமிழ் எழுத்துரு சரியான அமைப்பில் தெரியவில்லை

import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import re
import matplotlib.font_manager as fm
import tamil

# Install necessary libraries if not already installed
!pip install pandas nltk matplotlib Open-Tamil

# Download required NLTK data
nltk.download('punkt')
nltk.download('stopwords')


# Function to remove Tamil punctuation
def remove_tamil_punctuation(text):
    tamil_punctuations = ".,;:!?"
    text = ''.join(ch for ch in text if ch not in tamil_punctuations)
    return text

# Function to extract Tamil words
def get_tamil_words(text):
    # Use a more robust regex to capture Tamil words
    tamil_words = re.findall(r'[\u0B80-\u0BFF]+', text)  # Matches one or more Tamil characters
    return tamil_words

# Load the CSV file (ensure correct encoding and path)
try:
    data = pd.read_csv("Tolkappiyam_Punariyal.csv", encoding='utf-8')
except FileNotFoundError:
    print("Error: 'Tolkappiyam_Punariyal.csv' not found. Please upload the file or provide the correct path.")
    exit()  # Exit the script if the file is not found


# Print column names and display the DataFrame for inspection
print(data.columns)
display(data)

# Example usage (assuming 'Response' column exists)
if 'Response' in data.columns:
    tamil_text = data['Response'].iloc[0]  # Get the text from the first row of the 'Response' column
    cleaned_tamil_text = remove_tamil_punctuation(tamil_text)
    print("Cleaned Text:", cleaned_tamil_text)
    words = get_tamil_words(cleaned_tamil_text)
    print("Tamil Words:", words)

    # Word Frequency Analysis
    word_freq = nltk.FreqDist(words)
    print("Most Common Words:")
    print(word_freq.most_common(10))

    # Plot word frequency with Tamil font for x-axis labels
    font_path = '/content/TAU-Marutham.ttf'  # Replace with the actual path if different
    try:
      prop = fm.FontProperties(fname=font_path)
      word_freq.plot(20, cumulative=False)
      plt.xticks(fontproperties=prop, rotation=45, ha="right")  # Rotate labels for readability
      plt.show()
    except Exception as e:
        print(f"Error setting font properties or plotting: {e}")
        print("Please ensure the font file is correctly uploaded and the path is accurate.")
else:
    print("Error: 'Response' column not found in the CSV file.")

# x-axis லேபிள்களுக்கு எழுத்துருவைப் பயன்படுத்துதல்
plt.xticks(fontproperties=prop)

plt.show()

# prompt: prompt, response - விளைவாக்க் காட்ட நிரல் தரவும்

import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import re
import matplotlib.font_manager as fm

# ... (rest of your existing code)

# Function to process text and display results
def process_text_and_display(text):
    cleaned_text = remove_tamil_punctuation(text)
    print("Cleaned Text:", cleaned_text)

    words = get_tamil_words(cleaned_text)
    print("Tamil Words:", words)

    # Word Frequency Analysis
    word_freq = nltk.FreqDist(words)
    print("Most Common Words:")
    print(word_freq.most_common(10))

    # Plot the word frequency
    try:
        font_path = '/content/TAU-Marutham.ttf'
        prop = fm.FontProperties(fname=font_path)
        word_freq.plot(20, cumulative=False)
        plt.xticks(fontproperties=prop, rotation=45, ha='right')
        plt.show()

    except Exception as e:
        print(f"Error displaying plot: {e}")
        word_freq.plot(20, cumulative=False)
        plt.xticks(rotation=45, ha='right') # Default rotation if font fails
        plt.show()

# Get user input
#user_prompt = input("Enter the Tamil text: ")

# Process the user input and display the results
process_text_and_display(user_prompt)

# prompt: மேலே உள்ள நிரலில் Tolkappiyam_Punariyal.csv எனும் கோப்பில் உள்ள தரவினை வைத்து வினவல் -> பதில் தரும் நிரல் வேண்டும்.

import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import re
import matplotlib.font_manager as fm
import tamil

# ... (your existing code)

def get_answer(question):
    # 1. Preprocess the question (remove punctuation, etc.)
    cleaned_question = remove_tamil_punctuation(question)
    question_words = get_tamil_words(cleaned_question)

    # 2. Find the most similar question in the CSV
    best_match_index = -1
    max_overlap = 0

    for index, row in data.iterrows():
      response = row['Response']
      cleaned_response = remove_tamil_punctuation(response)
      response_words = get_tamil_words(cleaned_response)

      overlap = len(set(question_words) & set(response_words))
      if overlap > max_overlap:
          max_overlap = overlap
          best_match_index = index

    # 3. Return the answer if found, otherwise indicate not found
    if best_match_index != -1:
        return data['Response'].iloc[best_match_index]
    else:
        return "மன்னிக்கவும், எனக்குத் தெரியவில்லை."

# Example usage:
user_question = input("வினா கேளுங்கள்: ")
answer = get_answer(user_question)
print("பதில்:", answer)

# prompt: அந்த நிரலில் மேலும் 2முறை வினவல் அமையுமாறு எழுதி, மூன்றாவது முறை முடிந்தது செயல்பாட்டை நிறுத்தவும்

# ... (your existing code)

def get_answer(question):
    # 1. Preprocess the question (remove punctuation, etc.)
    cleaned_question = remove_tamil_punctuation(question)
    question_words = get_tamil_words(cleaned_question)

    # 2. Find the most similar question in the CSV
    best_match_index = -1
    max_overlap = 0

    for index, row in data.iterrows():
      response = row['Response']
      cleaned_response = remove_tamil_punctuation(response)
      response_words = get_tamil_words(cleaned_response)

      overlap = len(set(question_words) & set(response_words))
      if overlap > max_overlap:
          max_overlap = overlap
          best_match_index = index

    # 3. Return the answer if found, otherwise indicate not found
    if best_match_index != -1:
        return data['Response'].iloc[best_match_index]
    else:
        return "மன்னிக்கவும், எனக்குத் தெரியவில்லை."

for i in range(3):
    user_question = input("வினா கேளுங்கள்: ")
    answer = get_answer(user_question)
    print("பதில்:", answer)
    if i == 2:
      print("மூன்றாவது முறை முடிந்தது. செயல்பாடு நிறுத்தப்பட்டது.")
      break

# prompt: இந்த நிரலில் பயனர் கேட்கும் கேள்விக்குப் புரிந்துகொண்டு எழுதும் நிரல் தரவும்

# ... (your existing code)

def get_answer(question):
    # 1. Preprocess the question (remove punctuation, etc.)
    cleaned_question = remove_tamil_punctuation(question)
    question_words = get_tamil_words(cleaned_question)

    # 2. Find the most similar question in the CSV
    best_match_index = -1
    max_overlap = 0

    for index, row in data.iterrows():
      try:
          response = row['Response']
          cleaned_response = remove_tamil_punctuation(response)
          response_words = get_tamil_words(cleaned_response)

          overlap = len(set(question_words) & set(response_words))
          if overlap > max_overlap:
              max_overlap = overlap
              best_match_index = index
      except KeyError:
          print("Warning: 'Response' column not found in a row. Skipping this row.")
          continue  # Skip to the next iteration if the 'Response' column is missing

    # 3. Return the answer if found, otherwise indicate not found
    if best_match_index != -1:
        return data['Response'].iloc[best_match_index]
    else:
        return "மன்னிக்கவும், எனக்குத் தெரியவில்லை."

# Example usage (loop for multiple questions)
while True:
    user_question = input("வினா கேளுங்கள் (அல்லது 'நிறுத்து' என தட்டச்சு செய்து நிறுத்துங்கள்): ")
    if user_question.lower() == "நிறுத்து":
        break
    answer = get_answer(user_question)
    print("பதில்:", answer)